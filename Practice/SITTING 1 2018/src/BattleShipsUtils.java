import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.Files;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.io.UncheckedIOException;
import java.io.IOException;
import java.lang.StringBuilder;

class BattleShipsUtils {

    private static Random rnd = new Random();

    /**
     * This method generates a list of random Positions
     * within the bounds of a square grid specified by
     * gridSize. The number of generated Positions is specified
     * with amount.
     *
     * @param gridSize the x and y coordinates of Position objects
     * generated by this method will be between 0 and gridSize - 1.
     * gridSize must be larger than zero.
     * @param amount specifies the amount of Position objects generated
     * by this method. amount must not be negative.
     * @return A list of Position objects with the length specified by amount
     * and with x and y coordinates randomly chosen between 0 and gridSize - 1.
     * @exception IllegalArgumentException if gridSize is smaller or equal to zero
     * or if amount is negative.
     * @see IllegalArgumentException
     */
    public static List<Position> generateShots(int gridSize, int amount) {
        if (gridSize <= 0)
            throw new IllegalArgumentException("Specified gridSize must be larger than zero, but is: " 
                                                + gridSize);
        if (amount < 0)
            throw new IllegalArgumentException("Specified amount must be larger or equal to zero, but is: " 
                                                + amount);

        ArrayList<Position> shots = new ArrayList<Position>();
        for(int i = 0; i < amount; i++) {
            int x = rnd.nextInt(gridSize);
            int y = rnd.nextInt(gridSize);
            shots.add(new Position(x,y));
        }

        return shots;
    }

   /**
    * This method parses a game file specified by the given path
    * and returns the corresponding game grid as 2 dimensional array.
    * 
    * @param gameFile the path to a battleships game grid file
    * @return a 2 dimensional char array with the parsed game grid
    * @exception IllegalArgumentException if the gameFile is null, the file does not exist or is an invalid file.
    * @see IllegalArgumentException
    */
    public static char[][] parseGrid(String gamePath) {
        Path gameFile = Paths.get(gamePath);
        if(gameFile == null)
            throw new IllegalArgumentException("The given game file path must not be null!");
        if(!Files.exists(gameFile))
            throw new IllegalArgumentException("The given game file path does not exist! " + gameFile);
        if(!Files.isRegularFile(gameFile))
            throw new IllegalArgumentException("The given game file path is not a valid file! " + gameFile);

        Scanner in;
        try {
            in = new Scanner(gameFile);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }

        if (!in.hasNextInt())
            throw new RuntimeException("Given Battleship file has invalid format: " + gameFile);

        int size = in.nextInt();
        char[][] grid = new char[size][size];
        for(int y = 0; y < grid.length; y++) {
            for(int x = 0; x < grid[0].length; x++) {
                char value = in.next().charAt(0);
                grid[y][x] = value;
            }
        }

        return grid;
    }

    /**
    * This method prints the given game grid in ASCII format.
    * 
    * @param grid a battleships game grid
    * @return nothing
    * @exception IllegalArgumentException if the game grid is null or its length in either dimension is 0.
    * @see IllegalArgumentException
    */
    public static void printGrid(char[][] grid) {
        if(grid == null)
            throw new IllegalArgumentException("Given grid must not be null!");
        if(grid.length == 0 || grid[0].length == 0)
            throw new IllegalArgumentException("Given grid dimensions invalid!");

        StringBuilder bld = new StringBuilder();
        for (int y = -1; y < grid.length; y++) {
            for(int x = -1; x < grid[0].length; x++) {

                if(y >= 0) {
                    if( x >= 0) {
                        bld.append(grid[y][x]);
                        bld.append(" ");
                    } else {
                        bld.append(y);
                        bld.append(" ");
                    }
                } else {
                    if( x >= 0) {
                        bld.append(x);
                        bld.append(" ");
                    } else {
                        bld.append("  ");
                    }
                }
            }

            bld.append("\n");
        }

        System.out.println(bld);
    }

}
